package ehupatras.webrecommendation.structures.request;

import java.io.Serializable;
import java.util.Calendar;
import ehupatras.webrecommendation.structures.Website;
import ehupatras.webrecommendation.structures.page.Page;

public abstract class RequestAbstract
						implements Request, Serializable {

	// The Serializable classes needs it 
	private static final long serialVersionUID = 1L;
	
	
	// log file information
	// Detect IP address 
	private String m_ip = "-";
	private int m_userID = -1;
	// other log information
	protected Calendar m_time = null;
	private String m_method = "-";
	private String m_formatedURLname = "-";	
	private String m_protocol = "-";
	private int m_status = -1;
	private String m_reqsize = "-";
	private String m_reference = "-";
	private String m_useragent = "-";

	// if it is valid request or not
	private boolean m_isvalid = true;
	// if it is valid for link prediction or not
	private boolean m_isvalidLP = true;

	// this information is related to a sessioning phase
	private int m_sessionID = -1;

	// time in each URL and its related attributes
	private float m_elapsedtime = -1;  // in milliseconds.
	// U: Unimportant (<=10sec. & >=25-30min); H: Hub (5-6min.); C: Content (25-30min.);
	private String m_pageRoleUHC = "-"; 

	// information extracted from user agent
	private boolean m_isbot = false;
	
	
	
	// constructor
	public RequestAbstract(String ip, int ipID, String time, 
			String method, Page page, String protocol,
			int status, String reqsize, String reference, String useragent){
		
		// IP address
		m_ip = ip;
		m_userID = ipID;
		
		// time: convert the time to Calendar object and save
		m_time = this.getTime(time);
		
		// URL requests fields
		m_method = method;
		m_formatedURLname = page.getFormatedUrlName();
		m_protocol = protocol;
		
		// status of the request
		m_status = status;
		
		// request size in bytes
		m_reqsize = reqsize;
		
		// reference: from where the request comes
		m_reference = reference;
		
		// user agent field
		m_useragent = useragent;
		
		// compute if it is a valid request
		this.isvalid();
		// check the validity of the URL also
		if(!page.getIsValid()){	m_isvalid = false; }
		
		// detect if the request it is generated by robots
		isbot();
		
		// compute if it is valid for link prediction
		this.isSuitableToLinkPrediction();
	}
	
	
	
	// ABSTRACT METHODS
	
	protected abstract Calendar getTime(String time);
	
	
	
	// FUNCTIONS
	
	protected void isvalid(){
		// default is true
		m_isvalid = true;
		
		// the request method has to be GET or POST
		String method = m_method.toLowerCase(); 
		if(!method.equals("get") && !method.equals("post")){
			m_isvalid = false;
		}
		
		// the status field has to be of the format 2xx
		if(m_status/100 != 2){
			m_isvalid = false;
		}
	}
	
	protected void isbot(){
		// detect if the request is generated by bots, search engines, robots...
		m_isbot = false; // default
		String useragent2 = m_useragent.toLowerCase();
		if(	useragent2.contains("bot") ||
			useragent2.contains("spider") ||
			useragent2.contains("crawler") ){
			m_isbot  = true;
		}
	}
	
	public void isSuitableToLinkPrediction(){
		// !m_labelByHand.equals("index") we want index URLs in the sequences
		// because its alignment give us information.
		Page page = Website.getPage(m_formatedURLname);
		m_isvalidLP = m_isvalid &&
					  !m_isbot &&
					  m_elapsedtime>=0 &&
					  page.getIsSuitableToLinkPrediction();
	}
	
	
	
	// Getting/Setting the information of the request
	
	public boolean getIsSuitableToLinkPrediction(){
		return m_isvalidLP;
	}
	
	public boolean getIsValid(){
		return m_isvalid;
	}
	
	public long getTimeInMillis(){
		return m_time.getTimeInMillis();
	}
	
	public int getUserID(){
		return m_userID;
	}
	
	public void setSessionID(int sessionID){
		m_sessionID = sessionID;
	}
	
	public void setElapsedTime(float elapsedtime){
		m_elapsedtime = elapsedtime;
	}
	
	public float getElapsedTime(){
		return m_elapsedtime;
	}
	
	public int getSessionID(){
		return m_sessionID;
	}
	
	public String getPageRoleUHC(){
		return m_pageRoleUHC;
	}
	
	public void setPageRoleUHC(String rolestr){
		m_pageRoleUHC = rolestr;
	}
	
	public String getFormatedUrlName(){
		return m_formatedURLname;
	}
	
	// writing the requests information
	
	public String toStringLongHeader(){
		Page page = Website.getPage(m_formatedURLname);
		return 	"ip " +
				"userID " +
				"time " +
				"method " +
				"protocol " +
				"status " +
				"reqsize " +
				"reference " +
				"useragent " +
				"isvalid " +
				"sesssionID " +
				"elapsedtime " +
				"pageRoleUHC " +
				"isbot" + " " +
				"isvalidLinkPrediction" +
				page.toStringLongHeader();
	}
	
	public String toStringLong(){
		Page page = Website.getPage(m_formatedURLname);
		return 	m_ip + " " +
				m_userID + " " +
				m_time.getTimeInMillis() + " " +
				m_method + " " +
				m_protocol + " " +
				m_status + " " +
				m_reqsize + " " +
				m_reference.replaceAll(" ", "") + " " +
				m_useragent.replaceAll(" ", "") + " " +
				m_isvalid + " " +
				m_sessionID + " " +
				m_elapsedtime + " " +
				m_pageRoleUHC  + " " +
				m_isbot + " " +
				m_isvalidLP + " " +
				page.toStringLong();
	}
	
}
