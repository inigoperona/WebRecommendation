package ehupatras.webrecommendation.structures;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.io.Serializable;

public class Request implements Serializable{

	// log file information
		// Detect IP address 
	private String m_ip = "-";
	private int m_userID = -1;
		// other log information
	private Calendar m_time = null;
	private String m_method = "-";
	private String m_urlname = "-";
	private String m_formatedurlname = "-";
	private String m_protocol = "-";
	private int m_status = -1;
	private String m_reqsize = "-";
	private String m_reference = "-";
	private String m_useragent = "-";
	
	// if it is valid request or not
	private boolean m_isvalid = true;
	
	// URL's information
		// in which language is the requested page: es (spanish), en (english), eu (basque, euskera), fr (french)
	private String m_language = "-"; 
		// for example, the URL appears every 10 days at least 10 times
	private boolean m_isStatic = false;
		// for example, the URL appears in the log files at least 10 times
	private boolean m_isFrequent = false;
		// some URL's nature labeled by hand
	private String m_labelByHand = "-";
		// if it is a pure html or text based webpage (no pdf for example)
	private boolean m_ishtml = false;
	
	// this information is related to a sessioning phase
	private int m_sessionID = -1;
	private int m_urlIDusage = -1;
	private int m_urlIDcontent = -1;
	
	// time in each URL and its related attributes
	private float m_elapsedtime = -1;
		// U: Unimportant (<=10sec. & >=25-30min); H: Hub (5-6min.); C: Content (25-30min.);
	private String m_pageRoleUHC = "-"; 
	
	// information extracted from user agent
	private boolean m_isbot = false;
	
	// constructor
	public Request(String ip, int ipID, String time, String urlrequest, int status, 
			String reqsize, String reference, String useragent){
		// IP address
		m_ip = ip;
		m_userID = ipID;
		
		// time: convert the time to Calendar object and save
		String time2 = time.substring(2, time.length()-1);
		String[] time2A = time2.split(" ");
		String timeA_0 = time2A[0];
		String[] timeAA = timeA_0.split("/");
			// time zone (GTM+01)
		//String timezone = time2A[1];
			// day
		int day = Integer.valueOf(timeAA[0]).intValue();
			// month
		String monthstr = timeAA[1];
		int month = 0;
		switch (monthstr){
			case "Jan" : month = 0; break;
			case "Feb" : month = 1; break;
			case "Mar" : month = 2; break;
			case "Apr" : month = 3; break;
			case "May" : month = 4; break;
			case "Jun" : month = 5; break;
			case "Jul" : month = 6; break;
			case "Aug" : month = 7; break;
			case "Sep" : month = 8; break;
			case "Oct" : month = 9; break;
			case "Nov" : month = 10; break;
			case "Dec" : month = 11; break;
		}
			// extract the other time measures: year, hour, min, sec
		String othertime = timeAA[2];
		String[] othertimeA = othertime.split(":");
		int year = Integer.valueOf(othertimeA[0]).intValue();
		int hour = Integer.valueOf(othertimeA[1]).intValue();
		int min = Integer.valueOf(othertimeA[2]).intValue();
		int sec = Integer.valueOf(othertimeA[3]).intValue();
		GregorianCalendar gcal = new GregorianCalendar(year, month, day, hour, min, sec);
		m_time = gcal;
		
		// URL request line
		String urlrequest2 = urlrequest.substring(2, urlrequest.length()-1);
		String[] urlrequest2A = urlrequest2.split(" ");
		m_method = urlrequest2A[0];
		m_urlname = urlrequest2A[1];
		m_protocol = urlrequest2A[2];
		
		// status of the request
		m_status = status;
		
		// request size in bytes
		m_reqsize = reqsize;
		
		// reference: from where the request comes
		m_reference = reference;
		
		// user agent field
		m_useragent = useragent;
		
		// compute if it is a valid request
		isvalid();
		
		// detect html type request
		ishtml();
		
		// detect if the request it is generated by robots
		isbot();
		
		// fix the format of the URLs
		cleanURL();
	}
	
	private void isvalid(){
		// default is true
		m_isvalid = true;
		
		// the request method has to be GET or POST
		if(!m_method.equals("GET") && !m_method.equals("POST")){
			m_isvalid = false;
		}
		
		// the status field has to be of the format 2xx
		if(m_status/100 != 2){
			m_isvalid = false;
		}
		
		// Select the URLs related with the user click.
		// Those URLs with the extension: root (/), php, pdf, asp
		String urlname2 = m_urlname.toLowerCase();
		if(	!urlname2.equals("/") &&
			!urlname2.contains(".php") && 
			!urlname2.contains(".pdf")){
			m_isvalid = false;
		}
		
		// administration related clicks are not valid
		if(	urlname2.contains("/administrator/") ||
			urlname2.contains("/wp-admin/") ||
			urlname2.contains("/wp-content/") ||
			urlname2.contains("/xmlrpc.php") ||
			urlname2.contains("/wp-login.php") ||
			urlname2.contains("/wp-includes/") ||
			urlname2.contains("/wp-cron.php") ||
			urlname2.contains("/phpmyadmin/") ||
			urlname2.contains("option=com_ccboard")){
			m_isvalid = false;
		}
	}
	
	private void ishtml(){
		// Detect those URLs that have a text format (no pdf)
		m_ishtml = false; // default
		String urlname2 = m_urlname.toLowerCase();
		if(	urlname2.equals("/") ||
			urlname2.contains(".php")){
			m_ishtml = true;
		}
	}
	
	private void isbot(){
		// detect if the request is generated by bots, search engines, robots...
		m_isbot = false; // default
		String useragent2 = m_useragent.toLowerCase();
		if(	useragent2.contains("bot") ||
			useragent2.contains("spider") ||
			useragent2.contains("crawler") ){
			m_isbot  = true;
		}
	}
	
	private void cleanURL(){
		String urlname2 = m_urlname.toLowerCase();
		
		// language analysis
		m_language = "-"; // default
		if(urlname2.contains("lang=es")){
			m_language = "es";
		}
		if(urlname2.contains("lang=en")){
			m_language = "en";
		}
		if(urlname2.contains("lang=fr")){
			m_language = "fr";
		}
		if(urlname2.contains("lang=eu")){
			m_language = "eu";
		}
		
		// label some URLs by hand
		if(urlname2.contains("option=com_agenda")){
			m_labelByHand = "agenda";
		}
		if(urlname2.contains("noticias")){
			m_labelByHand = "noticias";
		}
		if(urlname2.contains("searchword=")){
			m_labelByHand = "search";
		}
		if(urlname2.contains("option=com_alojamientos")){
			m_labelByHand = "accomodation";
		}
		
		// Remove the parameters we do not need from the URL
		String[] params = {"option=", "view=", "layout=", "id=", "itemid=", 
				"categoria=", "cat=", "alojamiento=", "forum=", "limitstart="};
		if(urlname2.startsWith("/index.php?")){
			String[] urlname2A = urlname2.split("php");
			String newparams = "";
			if(urlname2A.length>=2){
				//String part0 = urlname2A[0];
				String part1 = urlname2A[1];
				String part11 = part1.substring(1,part1.length());
				String[] paramA = part11.split("&");
				// rewrite the URL following a fix order of parameters
				for(int i=0; i<params.length; i++){
					for(int j=0; j<paramA.length; j++){
						if(paramA[j].startsWith(params[i])){
							newparams = newparams + paramA[j] + "&";
							break;
						}
					}
				}
			}
			if(!newparams.equals("")){
				newparams = newparams.substring(0,newparams.length()-1);
				m_formatedurlname = "/index.php?" + newparams;
			} else {
				m_formatedurlname = "/index.php";
			}
		} else {
			m_formatedurlname = urlname2;
		}
	}
	
	public boolean getIsValid(){
		return m_isvalid;
	}
	
	public boolean getIsHTML(){
		return m_ishtml;
	}
	
	public boolean getIsRobot(){
		return m_isbot;
	}
	
	public String getFormatedUrlName(){
		return m_formatedurlname;
	}
	
	public void setUrlIDusage(int urlIDusage){
		m_urlIDusage = urlIDusage;
	}
	
	public long getTimeInMillis(){
		return m_time.getTimeInMillis();
	}
	
	public int getUrlIDusage(){
		return m_urlIDusage;
	}
	
	public void setIsFrequent(boolean isFrequent){
		m_isFrequent = isFrequent;
	}
	
	public void setIsStatic(boolean isStatic){
		m_isStatic = isStatic;
	}
	
	public int getUserID(){
		return m_userID;
	}
	
	public void setSessionID(int sessionID){
		m_sessionID = sessionID;
	}
	
	public void setElapsedTime(float elapsedtime){
		m_elapsedtime = elapsedtime;
	}
	
	public float getElapsedTime(){
		return m_elapsedtime;
	}
	
	public int getSessionID(){
		return m_sessionID;
	}
	
	public String toString(){
		return 	m_userID + " " + 
				m_time.getTimeInMillis() + " " +
				m_urlIDusage + " " + m_formatedurlname + " " + 
				m_labelByHand + " " + m_language + " " + 
				m_ishtml + " " + m_isbot + " " +
				m_isFrequent + " " + m_isStatic;
	}
	
	public static String toStringLongHeader(){
		return "ip " +
				"userID " +
				"time " +
				"method " +
				"urlname " +
				"formatedurlname " +
				"protocol " +
				"status " +
				"reqsize " +
				"reference " +
				"useragent " +
				"isvalid " +
				"language " +
				"isStatic " +
				"isFrequent " +
				"labelByHand " +
				"ishtml " +
				"sesssionID " +
				"urlIDusage " +
				"urlIDcontent " +
				"elapsedtime " +
				"pageRoleUHC " +
				"isbot";
	}
	
	public String toStringLong(){
		return 	m_ip + " " +
				m_userID + " " +
				m_time.getTimeInMillis() + " " +
				m_method + " " +
				m_urlname + " " +
				m_formatedurlname + " " +
				m_protocol + " " +
				m_status + " " +
				m_reqsize + " " +
				m_reference.replaceAll(" ", "") + " " +
				m_useragent.replaceAll(" ", "") + " " +
				m_isvalid + " " +
				m_language  + " " +
				m_isStatic + " " +
				m_isFrequent + " " +
				m_labelByHand + " " +
				m_ishtml + " " +
				m_sessionID + " " +
				m_urlIDusage + " " +
				m_urlIDcontent + " " +
				m_elapsedtime + " " +
				m_pageRoleUHC  + " " +
				m_isbot;
	}
	
}
